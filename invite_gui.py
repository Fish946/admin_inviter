# Telegram –∏–Ω–≤–∞–π—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ —É–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
import os
import sys
import json
import asyncio
import sqlite3
import shutil
from datetime import datetime
import pandas as pd
from telethon import TelegramClient, errors
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch
from telethon.errors import SessionPasswordNeededError
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QComboBox, QMessageBox,
    QTabWidget, QTextEdit, QProgressBar, QScrollArea, QCheckBox,
    QInputDialog, QFileDialog
)
from PySide6.QtCore import QThread, Signal

class TelegramWorker(QThread):
    update_log = Signal(str)
    update_progress = Signal(int)
    auth_code_required = Signal()
    password_required = Signal()
    finished_signal = Signal(tuple)
    
    def __init__(self, api_id, api_hash, phone, channel_link, users, users_per_batch=10, batch_delay=300):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.channel_link = channel_link
        self.users = users
        self.users_per_batch = users_per_batch
        self.batch_delay = batch_delay
        self.stop_flag = False
        self.client = None
        self.channel_id = None
        self.auth_code = None
        self.password = None
        self.last_error_message = ""

    async def invite_user(self, client, chat_id, user):
        """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_to_add = await client.get_entity(user)
            await client.edit_admin(
                chat_id,
                user_to_add,
                is_admin=True,
                title="Member"
            )
            return True
        except errors.RPCError as e:
            error_message = str(e)
            if "admin rights do not allow you to do this" in error_message:
                self.update_log.emit("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                self.update_log.emit("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.stop_flag = True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                return False
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {error_message}")
            return False

    async def get_participant_usernames(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        try:
            self.update_log.emit("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
            all_participants = []
            offset = 0
            limit = 100
            
            while True:
                participants = await self.client(GetParticipantsRequest(
                    self.channel_id,
                    ChannelParticipantsSearch(''),
                    offset=offset,
                    limit=limit,
                    hash=0
                ))
                
                if not participants.users:
                    break
                    
                all_participants.extend([
                    participant.username.lower() if participant.username else str(participant.id)
                    for participant in participants.users
                ])
                
                offset += len(participants.users)
                
                if len(participants.users) < limit:
                    break
            
            self.update_log.emit(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_participants)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return all_participants
            
        except Exception as e:
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {str(e)}")
            return []

    async def get_channel_id(self, channel_link):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ
            if channel_link.startswith('https://t.me/'):
                channel_link = channel_link[13:]
            elif channel_link.startswith('@'):
                channel_link = channel_link[1:]
            elif channel_link.startswith('t.me/'):
                channel_link = channel_link[5:]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await self.client.get_entity(channel_link)
            return channel.id
        except Exception as e:
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–∞–Ω–∞–ª–∞: {str(e)}")
            return None

    async def connect_and_get_channel(self, channel_link):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞"""
        if not await self.connect_client():
            return None
            
        channel_id = await self.get_channel_id(channel_link)
        if channel_id:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç Telegram
            if channel_id > 0:
                channel_id = int(f"-100{channel_id}")
            self.update_log.emit(f"‚úÖ ID –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ: {channel_id}")
            return channel_id
        return None

    async def bulk_invite(self):
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
        self.channel_id = await self.connect_and_get_channel(self.channel_link)
        if not self.channel_id:
            self.update_log.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞")
            return 0, 0

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        existing_participants = await self.get_participant_usernames()
        
        successful = 0
        failed = 0
        skipped = 0
        total_users = len(self.users)

        for i, user in enumerate(self.users):
            if self.stop_flag:
                self.update_log.emit("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
                user_id = user.replace('@', '').lower() if isinstance(user, str) else str(user)
                if user_id in existing_participants:
                    self.update_log.emit(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
                    skipped += 1
                    continue

                result = await self.invite_user(self.client, self.channel_id, user)
                if not result:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if "–Ω–µ–¥–∞–≤–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in self.last_error_message:
                        self.update_log.emit("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                    failed += 1
                else:
                    successful += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((i + 1) / total_users * 100)
                self.update_progress.emit(progress)

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                await asyncio.sleep(4)

                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
                if (i + 1) % self.users_per_batch == 0 and i + 1 < total_users:
                    self.update_log.emit(f"‚è≥ –ü–∞—É–∑–∞ –Ω–∞ {self.batch_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(self.batch_delay)

            except Exception as e:
                self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                failed += 1

        self.update_log.emit(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {successful}\n"
                            f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã): {skipped}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        return successful, failed

    def run(self):
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        success = 0
        failed = 0
        try:
            success, failed = self.loop.run_until_complete(self.bulk_invite())
            if self.client and self.client.is_connected():
                try:
                    self.loop.run_until_complete(self.client.disconnect())
                except:
                    pass
        except Exception as e:
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            try:
                self.loop.stop()
                self.loop.close()
            except:
                pass
            self.finished_signal.emit((success, failed))

    async def connect_client(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É Telegram"""
        try:
            self.update_log.emit("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            session_file = os.path.join('sessions', self.phone)
            self.client = TelegramClient(session_file, self.api_id, self.api_hash)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.client.is_user_authorized():
                self.update_log.emit("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                return False
                
            self.update_log.emit("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
            return True
            
        except Exception as e:
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
            return False

class UserDatabase:
    def __init__(self):
        self.db_path = os.path.join('data', 'users.db')
        self.create_database()
    
    def create_database(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                username TEXT PRIMARY KEY,
                status TEXT,
                last_update TIMESTAMP,
                channel TEXT,
                notes TEXT
            )
        ''')
        conn.commit()
        conn.close()
    
    def add_user(self, username):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (username, status) VALUES (?, ?)',
                      (username, 'pending'))
        conn.commit()
        conn.close()
    
    def update_status(self, username, status, notes=''):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET status = ?, last_update = CURRENT_TIMESTAMP, notes = ?
            WHERE username = ?
        ''', (status, notes, username))
        conn.commit()
        conn.close()
    
    def get_pending_users(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT username FROM users WHERE status = "pending"')
        users = [row[0] for row in cursor.fetchall()]
        conn.close()
        return users

class CheckAccountsWorker(QThread):
    log_signal = Signal(str)
    show_dialog_signal = Signal(str, str)
    
    def __init__(self, accounts, parent=None):
        super().__init__(parent)
        self.accounts = accounts
        
    def run(self):
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        for account in self.accounts:
            self.log_signal.emit(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account}...")
            
            try:
                session_file = os.path.join('sessions', account)
                config_file = os.path.join('configs', f"{account}.json")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                if not os.path.exists(config_file):
                    self.log_signal.emit(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è {account}")
                    continue
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º API –¥–∞–Ω–Ω—ã–µ
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    if 'telegram_api' in config:
                        api_data = config['telegram_api']
                        api_id = api_data.get('api_id')
                        api_hash = api_data.get('api_hash')
                    else:
                        api_id = config.get('app_id')
                        api_hash = config.get('app_hash')
                
                self.log_signal.emit(f"üì± –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ API - ID: {api_id}, Hash: {api_hash}")
                
                # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(session_file, api_id, api_hash, loop=loop)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ event loop
                loop.run_until_complete(self._check_account(client, account))
                
            except Exception as e:
                self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
                
        self.log_signal.emit("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        loop.close()
    
    async def _check_account(self, client, account):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            await client.connect()
            
            if not await client.is_user_authorized():
                self.log_signal.emit("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                self.show_dialog_signal.emit(account, "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            else:
                self.log_signal.emit("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ SpamBot
                    spam_bot = await client.get_entity('SpamBot')
                    await client.send_message(spam_bot, '/start')
                    await asyncio.sleep(2)  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                    messages = await client.get_messages(spam_bot, limit=1)
                    
                    if messages and messages[0]:
                        status = messages[0].message
                        self.log_signal.emit(f"üìù –°—Ç–∞—Ç—É—Å –æ—Ç @SpamBot: {status}")
                except Exception as e:
                    self.log_signal.emit(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {str(e)}")
                    
        finally:
            await client.disconnect()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Telegram –ò–Ω–≤–∞–π—Ç —á–µ—Ä–µ–∑ –ê–¥–º–∏–Ω–∫—É")
        self.setMinimumSize(800, 600)
        self.worker = None
        self.sessions = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs('sessions', exist_ok=True)
        os.makedirs('configs', exist_ok=True)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
        for file in os.listdir():
            if file.endswith('.session') or file.endswith('.session-journal'):
                try:
                    src = file
                    dst = os.path.join('sessions', file)
                    if os.path.exists(src):
                        if os.path.exists(dst):
                            os.remove(src)  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ sessions, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–Ω—è
                        else:
                            shutil.move(src, dst)  # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tab_widget = QTabWidget()
        self.setCentralWidget(self.tab_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.invite_tab = QWidget()
        self.check_tab = QWidget()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç self.log_text)
        self.setup_invite_tab()
        self.setup_check_tab()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(self.invite_tab, "–ò–Ω–≤–∞–π—Ç")
        self.tab_widget.addTab(self.check_tab, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ç–∞–∫ –∫–∞–∫ log_text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.create_directories()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        self.load_sessions()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        if self.sessions:
            first_session = self.sessions[0]
            self.session_combo.setCurrentText(first_session)
            self.on_session_changed(first_session)

    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            'sessions',
            'configs',
            'temp',
            'logs',
            'data'
        ]
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–∫–∞—Ö
        self.cleanup_root_directory()
        
        if hasattr(self, 'log_text'):
            self.log_message("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")

    def cleanup_root_directory(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏"""
        try:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º JSON —Ñ–∞–π–ª—ã –≤ configs
            for file in os.listdir():
                if file.endswith('.json'):
                    src = file
                    dst = os.path.join('configs', file)
                    if os.path.exists(src):
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ configs, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if os.path.exists(dst):
                            os.remove(src)
                        else:
                            os.rename(src, dst)
        except Exception as e:
            if hasattr(self, 'log_text'):
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")

    def move_session_files(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫—É sessions"""
        try:
            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            session_files = [f for f in os.listdir() if f.endswith('.session') or f.endswith('.session-journal')]
            
            for file in session_files:
                try:
                    source = file
                    destination = os.path.join('sessions', file)
                    
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ sessions, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                    if os.path.exists(destination):
                        os.remove(source)
                    else:
                        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                        shutil.move(source, destination)
                        if hasattr(self, 'log_text'):
                            self.log_text.append(f"‚úÖ –§–∞–π–ª {file} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É sessions")
                except Exception as e:
                    if hasattr(self, 'log_text'):
                        self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
        except Exception as e:
            if hasattr(self, 'log_text'):
                self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π: {str(e)}")

    def create_client(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        try:
            phone = self.session_combo.currentText()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö
            root_session = f"{phone}.session"
            sessions_dir_file = os.path.join('sessions', f"{phone}.session")
            
            self.log_text.append(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è {phone}")
            
            if os.path.exists(root_session):
                self.log_text.append(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ: {root_session}")
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É sessions
                if not os.path.exists('sessions'):
                    os.makedirs('sessions')
                shutil.move(root_session, sessions_dir_file)
                self.log_text.append("‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É sessions")
            
            if os.path.exists(sessions_dir_file):
                self.log_text.append(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–ø–∫–µ sessions: {sessions_dir_file}")
            else:
                self.log_text.append("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            session_size = os.path.getsize(sessions_dir_file)
            self.log_text.append(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {session_size} –±–∞–π—Ç")
            
            api_id = int(self.api_id_input.text().strip())
            api_hash = self.api_hash_input.text().strip()
            
            self.log_text.append(f"üîë –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å API ID: {api_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–ø–∫–µ sessions
            session_file = os.path.join('sessions', phone)
            self.client = TelegramClient(session_file, api_id, api_hash)
            
            return True
        except Exception as e:
            self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            return False

    def setup_invite_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω–≤–∞–π—Ç–∞"""
        layout = QVBoxLayout(self.invite_tab)
        
        # –í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏
        session_layout = QHBoxLayout()
        self.session_combo = QComboBox()
        self.session_combo.addItems(sorted(self.sessions))
        self.session_combo.setEditable(False)
        self.session_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
        self.session_combo.currentTextChanged.connect(self.on_session_changed)
        
        delete_session_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")
        delete_session_btn.clicked.connect(self.delete_session)
        
        refresh_sessions_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        refresh_sessions_btn.clicked.connect(self.refresh_sessions)
        
        session_layout.addWidget(QLabel("–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:"))
        session_layout.addWidget(self.session_combo)
        session_layout.addWidget(delete_session_btn)
        session_layout.addWidget(refresh_sessions_btn)
        layout.addLayout(session_layout)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_layout = QVBoxLayout()
        
        api_layout = QHBoxLayout()
        self.api_id_input = QLineEdit()
        self.api_hash_input = QLineEdit()
        api_layout.addWidget(QLabel("API ID:"))
        api_layout.addWidget(self.api_id_input)
        api_layout.addWidget(QLabel("API Hash:"))
        api_layout.addWidget(self.api_hash_input)
        settings_layout.addLayout(api_layout)

        phone_layout = QHBoxLayout()
        self.phone_input = QLineEdit()
        phone_layout.addWidget(QLabel("–¢–µ–ª–µ—Ñ–æ–Ω:"))
        phone_layout.addWidget(self.phone_input)
        settings_layout.addLayout(phone_layout)

        channel_layout = QHBoxLayout()
        self.channel_input = QLineEdit()
        self.channel_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/channel –∏–ª–∏ @channel")
        channel_layout.addWidget(QLabel("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:"))
        channel_layout.addWidget(self.channel_input)
        settings_layout.addLayout(channel_layout)

        layout.addLayout(settings_layout)

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_header_layout = QHBoxLayout()
        users_header_layout.addWidget(QLabel("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"))
        
        load_db_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î")
        load_db_button.clicked.connect(self.load_users_from_db)
        users_header_layout.addWidget(load_db_button)
        
        layout.addLayout(users_header_layout)

        self.users_input = QTextEdit()
        self.users_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        layout.addWidget(self.users_input)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)

        # –õ–æ–≥
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        layout.addWidget(QLabel("–õ–æ–≥:"))
        layout.addWidget(self.log_text)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        self.start_button = QPushButton("–ù–∞—á–∞—Ç—å")
        self.stop_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.stop_button.setEnabled(False)
        
        self.start_button.clicked.connect(self.start_invite)
        self.stop_button.clicked.connect(self.stop_invite)
        self.save_button.clicked.connect(self.save_config)
        
        buttons_layout.addWidget(self.start_button)
        buttons_layout.addWidget(self.stop_button)
        buttons_layout.addWidget(self.save_button)
        layout.addLayout(buttons_layout)

    def setup_check_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        layout = QVBoxLayout(self.check_tab)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.account_checkboxes = {}
        for session in self.sessions:
            checkbox = QCheckBox(session)
            self.account_checkboxes[session] = checkbox
            scroll_layout.addWidget(checkbox)
        
        scroll.setWidget(scroll_content)
        layout.addWidget(scroll)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        check_selected_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        check_all_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ")
        refresh_accounts_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        
        check_selected_btn.clicked.connect(self.check_selected_accounts)
        check_all_btn.clicked.connect(self.check_all_accounts)
        refresh_accounts_btn.clicked.connect(self.refresh_account_checkboxes)
        
        buttons_layout.addWidget(check_selected_btn)
        buttons_layout.addWidget(check_all_btn)
        buttons_layout.addWidget(refresh_accounts_btn)
        layout.addLayout(buttons_layout)
        
        # –õ–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_log = QTextEdit()
        self.check_log.setReadOnly(True)
        layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:"))
        layout.addWidget(self.check_log)

    def refresh_account_checkboxes(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        for checkbox in self.account_checkboxes.values():
            checkbox.deleteLater()
        self.account_checkboxes.clear()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        scroll = self.check_tab.findChild(QScrollArea)
        scroll_content = scroll.widget()
        scroll_layout = scroll_content.layout()
        
        for session in self.sessions:
            checkbox = QCheckBox(session)
            self.account_checkboxes[session] = checkbox
            scroll_layout.addWidget(checkbox)

    def check_selected_accounts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        selected_accounts = [session for session, checkbox in self.account_checkboxes.items() 
                           if checkbox.isChecked()]
        if not selected_accounts:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç")
            return
        
        self.check_accounts(selected_accounts)

    def check_all_accounts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self.check_accounts(self.sessions)

    def check_accounts(self, accounts=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if accounts is None:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts = [account for account, checkbox in self.account_checkboxes.items() 
                       if checkbox.isChecked()]
            if not accounts:
                self.check_log.append("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                return
            
        self.check_log.clear()
        self.check_log.append("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º worker
        self.check_worker = CheckAccountsWorker(accounts)
        self.check_worker.log_signal.connect(self.check_log.append)
        self.check_worker.show_dialog_signal.connect(self.show_restore_dialog)
        self.check_worker.start()

    def show_restore_dialog(self, account, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        msg_box = QMessageBox()
        msg_box.setWindowTitle('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
        msg_box.setText(f'–ê–∫–∫–∞—É–Ω—Ç {account} {message}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?')
        
        restore_button = msg_box.addButton('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', QMessageBox.ActionRole)
        delete_button = msg_box.addButton('–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é', QMessageBox.ActionRole)
        skip_button = msg_box.addButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', QMessageBox.RejectRole)
        
        msg_box.exec_()
        
        if msg_box.clickedButton() == restore_button:
            self.check_log.append(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {account}...")
            self.restore_session(account)
        elif msg_box.clickedButton() == delete_button:
            self.check_log.append(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é {account}...")
            self.delete_session_files(account)

    def restore_session(self, account):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        self.check_log.append(f"\n–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {account}...")
        
        try:
            session_file = os.path.join('sessions', account)
            config_file = os.path.join('configs', f"{account}.json")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º API –¥–∞–Ω–Ω—ã–µ
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                if 'telegram_api' in config:
                    api_data = config['telegram_api']
                    api_id = api_data.get('api_id')
                    api_hash = api_data.get('api_hash')
                else:
                    api_id = config.get('app_id')
                    api_hash = config.get('app_hash')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = account
            if not phone.startswith('+'):
                phone = '+' + phone
            
            self.check_log.append(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä: {phone}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            client = TelegramClient(session_file, api_id, api_hash)
            
            try:
                client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
                if client.is_user_authorized():
                    self.check_log.append("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥
                self.check_log.append("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –≤ Telegram...")
                send_code_result = client.send_code_request(
                    phone,
                    force_sms=False  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º SMS
                )
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                code, ok = QInputDialog.getText(
                    self,
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥',
                    f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Telegram –¥–ª—è {phone}:'
                )
                
                if ok and code:
                    try:
                        self.check_log.append("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º...")
                        client.sign_in(
                            phone=phone,
                            code=code,
                            phone_code_hash=send_code_result.phone_code_hash
                        )
                        self.check_log.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                        
                    except SessionPasswordNeededError:
                        self.check_log.append("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
                        password, ok = QInputDialog.getText(
                            self,
                            '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
                            '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:',
                            QLineEdit.Password
                        )
                        
                        if ok and password:
                            client.sign_in(password=password)
                            self.check_log.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                        else:
                            self.check_log.append("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    
                    except Exception as e:
                        self.check_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {str(e)}")
                else:
                    self.check_log.append("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    
            finally:
                client.disconnect()
                
        except Exception as e:
            self.check_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            self.check_log.append(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")

    def delete_session_files(self, account):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏"""
        try:
            session_path = os.path.join('sessions', f"{account}.session")
            journal_path = os.path.join('sessions', f"{account}.session-journal")
            config_path = os.path.join('configs', f"{account}.json")
            
            if os.path.exists(session_path):
                os.remove(session_path)
            if os.path.exists(journal_path):
                os.remove(journal_path)
            if os.path.exists(config_path):
                os.remove(config_path)
            
            self.check_log.append(f"üóëÔ∏è –°–µ—Å—Å–∏—è {account} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
            self.refresh_sessions()
            self.refresh_account_checkboxes()
            
        except Exception as e:
            self.check_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")

    def load_sessions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π"""
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .session –≤ –ø–∞–ø–∫–µ sessions
        session_files = [f for f in os.listdir('sessions') 
                        if f.endswith('.session') and not f.endswith('.session-journal')]
        self.sessions = []
        
        for session_file in session_files:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            phone = session_file.replace('.session', '')
            self.sessions.append(phone)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_temp_files()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
        self.session_combo.clear()
        self.session_combo.addItems(sorted(self.sessions))
        
        self.log_message(f"üì± –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(self.sessions)}")

    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ temp
            for file in os.listdir('temp'):
                file_path = os.path.join('temp', file)
                try:
                    if os.path.isfile(file_path):
                        os.unlink(file_path)
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

    def log_message(self, message):
        self.log_text.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")

    def read_session_info(self, session_file):
        """–ß—Ç–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            config_file = os.path.join('configs', session_file)
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                api_data = config_data.get('telegram_api', {})
                return {
                    'api_id': api_data.get('api_id', ''),
                    'api_hash': api_data.get('api_hash', ''),
                    'phone': api_data.get('phone', '')
                }
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return None

    def on_session_changed(self, session):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏"""
        if session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
            session_file = f"{session}.session"
            journal_file = f"{session}.session-journal"
            
            if os.path.exists(session_file):
                try:
                    shutil.move(session_file, os.path.join('sessions', session_file))
                    self.log_text.append(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–∞–ø–∫—É sessions")
                except Exception as e:
                    self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {str(e)}")
            
            if os.path.exists(journal_file):
                try:
                    shutil.move(journal_file, os.path.join('sessions', journal_file))
                except Exception as e:
                    self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞: {str(e)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_file = os.path.join('configs', f"{session}.json")
            self.log_text.append(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ {session}.json")
            
            try:
                if not os.path.exists(config_file):
                    self.log_text.append(f"‚ùå –§–∞–π–ª {session}.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
                    
                with open(config_file, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    api_data = config_data.get('telegram_api', {})
                    
                    if api_data:
                        api_id = str(api_data.get('api_id', ''))
                        api_hash = api_data.get('api_hash', '')
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ telegram_api, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                        api_id = str(config_data.get('app_id', ''))
                        api_hash = config_data.get('app_hash', '')
                    
                    if api_id and api_hash:
                        self.log_text.append(f"üì± –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ API - ID: {api_id}, Hash: {api_hash}")
                        
                        self.api_id_input.setText(api_id)
                        self.api_hash_input.setText(api_hash)
                        self.phone_input.setText(session)
                        
                        self.log_text.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session}")
                    else:
                        self.log_text.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API ID –∏ Hash –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    
            except Exception as e:
                self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

    def delete_session(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        current_session = self.session_combo.currentText()
        if current_session:
            reply = QMessageBox.question(
                self, 
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {current_session}?',
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
                    config_file = f"{current_session}.json"
                    if os.path.exists(config_file):
                        os.remove(config_file)
                    
                    self.log_message(f"‚úÖ –°–µ—Å—Å–∏—è {current_session} —É–¥–∞–ª–µ–Ω–∞")
                    self.refresh_sessions()
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")

    def start_invite(self):
        try:
            api_id = int(self.api_id_input.text().strip())
            api_hash = self.api_hash_input.text().strip()
            phone = self.phone_input.text().strip()
            channel_link = self.channel_input.text().strip()
            users = [u.strip() for u in self.users_input.toPlainText().split('\n') if u.strip()]

            if not all([api_id, api_hash, phone, channel_link, users]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
            self.save_config()

            # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º worker'–∞
            session_file = os.path.join('sessions', phone)
            try:
                client = TelegramClient(session_file, api_id, api_hash)
                # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                client.connect()
                if not client.is_user_authorized():
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏.")
                    client.disconnect()
                    return
                client.disconnect()
                self.log_text.append("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–∞")
            except Exception as e:
                self.log_text.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Telegram: {str(e)}")
                return

            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞–µ–º worker
            self.worker = TelegramWorker(
                api_id=api_id,
                api_hash=api_hash,
                phone=phone,
                channel_link=channel_link,
                users=users,
                users_per_batch=10,
                batch_delay=300
            )
            
            self.worker.update_log.connect(self.log_message)
            self.worker.update_progress.connect(self.progress_bar.setValue)
            self.worker.auth_code_required.connect(self.request_auth_code)
            self.worker.password_required.connect(self.request_password)
            self.worker.finished_signal.connect(self.on_invite_finished)
            
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.progress_bar.setValue(0)
            self.worker.start()

        except ValueError as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def stop_invite(self):
        if self.worker:
            self.worker.stop()
            self.stop_button.setEnabled(False)
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            self.worker.wait()

    def request_auth_code(self):
        code, ok = QInputDialog.getText(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:",
            QLineEdit.EchoMode.Normal
        )
        if ok and code:
            self.worker.set_auth_code(code)

    def request_password(self):
        password, ok = QInputDialog.getText(
            self,
            "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            QLineEdit.EchoMode.Password
        )
        if ok and password:
            self.worker.set_password(password)

    def on_invite_finished(self, results):
        success, failed = results
        self.log_message(f"‚ú® –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –£—Å–ø–µ—à–Ω–æ: {success}, –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.worker and self.worker.isRunning():
            self.worker.stop()
            self.worker.wait()
        event.accept()

    def refresh_sessions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π"""
        current = self.session_combo.currentText()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        self.load_sessions()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
        self.session_combo.clear()
        self.session_combo.addItems(sorted(self.sessions))
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if current in self.sessions:
            self.session_combo.setCurrentText(current)
        elif self.sessions:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
            self.session_combo.setCurrentText(self.sessions[0])
            
        self.log_message(f"üîÑ –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(self.sessions)}")

    def load_users_from_file(self):
        try:
            with open('users.txt', 'r', encoding='utf-8') as f:
                users = f.read()
            self.users_input.setText(users)
            self.log_message("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ users.txt")
        except FileNotFoundError:
            self.log_message("‚ùå –§–∞–π–ª users.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    def save_users_to_file(self):
        try:
            users = self.users_input.toPlainText()
            with open('users.txt', 'w', encoding='utf-8') as f:
                f.write(users)
            self.log_message("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª users.txt")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    def load_config(self):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            with open('config.json', 'r', encoding='utf-8') as f:
                self.config = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            current_session = self.session_combo.currentText()
            if current_session:
                config_file = f"{current_session}.json"
                if os.path.exists(config_file):
                    try:
                        with open(config_file, 'r', encoding='utf-8') as f:
                            session_config = json.load(f)
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                            api_settings = session_config.get('telegram_api', {})
                            self.api_id_input.setText(str(api_settings.get('api_id', '')))
                            self.api_hash_input.setText(api_settings.get('api_hash', ''))
                            self.phone_input.setText(current_session)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
                            channel_settings = session_config.get('channel_settings', {})
                            self.channel_input.setText(str(channel_settings.get('channel_link', '')))
                            
                            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {current_session}")
                    except Exception as e:
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏: {str(e)}")
                else:
                    self.log_message(f"‚ùå –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    self.api_id_input.clear()
                    self.api_hash_input.clear()
                    self.phone_input.setText(current_session)
                    self.channel_input.clear()
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            self.load_users_from_file()
                
        except FileNotFoundError:
            self.log_message("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
            self.config = {}
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            self.config = {}

    def save_config(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config = {
                'invite_settings': {
                    'users_per_batch': 10,
                    'batch_delay': 300,
                    'user_delay': 4,
                    'max_retries': 3
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ —Å—Ä–∞–∑—É –≤ –ø–∞–ø–∫—É configs
            config_path = os.path.join('configs', 'config.json')
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            phone = self.phone_input.text()
            if phone:
                api_id = self.api_id_input.text().strip()
                api_hash = self.api_hash_input.text().strip()
                channel_link = self.channel_input.text().strip()
                
                self.log_message(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏ {phone}")
                
                session_config = {
                    'telegram_api': {
                        'api_id': api_id,
                        'api_hash': api_hash,
                        'phone': phone
                    },
                    'channel_settings': {
                        'channel_link': channel_link
                    }
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –≤ –ø–∞–ø–∫—É configs
                session_config_file = os.path.join('configs', f"{phone}.json")
                with open(session_config_file, 'w', encoding='utf-8') as f:
                    json.dump(session_config, f, indent=4, ensure_ascii=False)
                
                self.log_message(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {session_config_file}")
        
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

    def import_from_excel(self, file_path):
        try:
            df = pd.read_excel(file_path)
            if 'username' not in df.columns:
                raise ValueError("Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'username'")
            
            for username in df['username']:
                self.db.add_user(str(username).strip())
            
            self.log_message(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel")
            return True
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ Excel: {str(e)}")
            return False

    def export_to_excel(self):
        try:
            conn = sqlite3.connect(self.db.db_path)
            df = pd.read_sql_query('SELECT * FROM users', conn)
            conn.close()
            
            export_path = os.path.join('data', f'users_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx')
            df.to_excel(export_path, index=False)
            self.log_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_path}")
            return True
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {str(e)}")
            return False

    def import_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            "",
            "Excel Files (*.xlsx *.xls)"
        )
        if file_path:
            if self.import_from_excel(file_path):
                self.refresh_user_list()

    def refresh_user_list(self):
        users = self.db.get_pending_users()
        self.users_input.setText('\n'.join(users))

    def load_users_from_db(self):
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (*.db);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
            )
            
            if not file_path:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
                return
            
            conn = sqlite3.connect(file_path)
            cursor = conn.cursor()
            cursor.execute("SELECT username FROM users WHERE status = 'pending'")
            users = cursor.fetchall()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            self.users_input.clear()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫
            users_text = []
            for user in users:
                username = user[0].strip('@') if user[0].startswith('@') else user[0]
                users_text.append(username)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ QTextEdit
            self.users_input.setText('\n'.join(users_text))
            
            self.log_text.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            self.log_text.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")
        finally:
            if 'conn' in locals():
                conn.close()

    def delete_invalid_session(self, account):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            session_file = os.path.join('sessions', f"{account}.session")
            journal_file = os.path.join('sessions', f"{account}.session-journal")
            
            if os.path.exists(session_file):
                os.remove(session_file)
            if os.path.exists(journal_file):
                os.remove(journal_file)
            
            self.check_log.append(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å–µ—Å—Å–∏—è {account}")
            return True
        except Exception as e:
            self.check_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
            return False

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())